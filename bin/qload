#!/usr/bin/env python3

import subprocess
import re
from collections import Counter


def read_process(args):
    p = subprocess.Popen(args, stdout=subprocess.PIPE)
    return [l.decode('latin1').rstrip() for l in p.stdout.readlines()]

def parse_gpus(gp_str):
    gp_str = gp_str.strip()
    if gp_str == '(null)' or gp_str == 'N/A':
        return 0
    else:
        return int(gp_str.split(':')[2].split('(')[0])

def parse_node_list(numnodes, nodes, gpus1, gpus2):
    numnodes = int(numnodes)
    if numnodes == 1:
        gpus = parse_gpus(gpus1) + parse_gpus(gpus2)
        return gpus, [nodes]
    assert gpus1 == 'N/A' # I presume that GPUs are allocated per node for multiple nodes, but I don't really know how this works
    gpus = parse_gpus(gpus2)
    if nodes == '': # when the job is PENDING
        return gpus, ['' for _ in range(numnodes)]
    assert ',' not in nodes # I think there may be format with a comma separated list, but I haven't seen it yet
    parse = re.search("([^\[]*)\[([0-9]*)-([0-9]*)\]", nodes)
    nodename = parse.group(1)
    nodelist = [nodename + str(x) for x in range(int(parse.group(2)), int(parse.group(3)) + 1)]
    assert len(nodelist) == numnodes
    return gpus, nodelist

def main():
    # overall cluster stats
    data = read_process(['sinfo', '-N', '--noheader', '-O', 'Available,Partition,NodeList,CPUs,Gres:50,features_act'])
    partitions = dict()
    for line in data:
        status, partition, node, cpus, gpus, features = line.split()
        if partition[-1] == '*':
            partition = partition[:-1]
        if status =='up':
            if partition not in partitions:
                partitions[partition] = {'cpus': 0, 'gpus': 0, 'cpus_used': 0, 'gpus_used': 0, 'jobs': 0}
                partitions[partition]['users'] = dict()
                partitions[partition]['nodes'] = dict()
            partitions[partition]['cpus'] += int(cpus)
            gpus = parse_gpus(gpus)
            partitions[partition]['gpus'] += gpus
            if gpus > 1:
                if node not in partitions[partition]['nodes']:
                    partitions[partition]['nodes'][node] = dict()
                    partitions[partition]['nodes'][node]['type'] = re.search("gpuram([0-9]+G)", features).group(1)
                    partitions[partition]['nodes'][node]['gpus'] = gpus
    partitions['waiting'] = {'cpus': 0, 'gpus': 0, 'cpus_used': 0, 'gpus_used': 0, 'jobs': 0}
    partitions['waiting']['users'] = dict()

    ## print partition info:
    #for partition in partitions.keys():
    #    print(partition, partitions[partition]['cpus'], partitions[partition]['gpus'])

    # detailed squeue output
    data = read_process(['squeue', '--noheader', '-O', 'State:\t,UserName:\t,Partition:\t,NumNodes:\t,NodeList:\t,NumCPUs:\t,tres-per-job:\t,tres-per-node'])
    # read & accumulate job list stats
    for line in data:
        _, user, partition, numnodes, nodes, cpus, gpus1, gpus2 = line.strip().split('\t')
        cpus = int(cpus)
        if partition not in partitions or nodes == '':
            partition = 'waiting'
        if user not in partitions[partition]['users']:
            partitions[partition]['users'][user] = {'jobs': 0, 'cpus': 0, 'gpus': 0}
        partitions[partition]['users'][user]['jobs'] += 1
        partitions[partition]['jobs'] += 1
        partitions[partition]['users'][user]['cpus'] += cpus
        partitions[partition]['cpus_used'] += cpus
        gpus, nodes_list = parse_node_list(numnodes, nodes, gpus1, gpus2)
        for nd in nodes_list:
            partitions[partition]['users'][user]['gpus'] += gpus
            partitions[partition]['gpus_used'] += gpus
            if partition != 'waiting' and partitions[partition]['gpus'] > 0:
                partitions[partition]['nodes'][nd]['gpus'] -= gpus
    # print out jobs/cpus/gpus per user for each queue, incl. waiting
    for name, stats in partitions.items():
        # compute per-user stats

        # print headers
        if name == 'waiting':
            print('\nWaiting             (%3d jobs)' % (stats['jobs']))
        else:
            print('\nQueue %-13s (%3d/%3d slots)' % (name, stats['cpus_used'], stats['cpus']))
        # print free GPU info
        if stats['gpus'] > 0:
            print('GPUs total: %2d' % stats['gpus'])
            print('GPUs used:  %2d' % stats['gpus_used'])
            if stats['gpus'] > stats['gpus_used']:
                print('GPUs free:', ', '.join(str(c) + " " + t for c, t in sorted([(x['gpus'], x['type']) for x in stats['nodes'].values() if x['gpus'] > 0], reverse=True)))
        # list users sort by used GPUs, then CPUs
        print('    user            jobs /  CPUs / GPUs\n----------------------------------------')
        for user in sorted(stats['users'].keys(), key=lambda u: (stats['users'][u]['gpus'], stats['users'][u]['cpus']), reverse=True):
            print('    %-12s   %5d / %5d / %5d' % (user, stats['users'][user]['jobs'], stats['users'][user]['cpus'],stats['users'][user]['gpus']))


if __name__ == '__main__':
    main()
